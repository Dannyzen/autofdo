#ifndef LLVM_PROFILEDATA_PROPELLERPROF_H
#define LLVM_PROFILEDATA_PROPELLERPROF_H

#include "llvm/ADT/SmallSet.h"
#include "llvm/ADT/SmallVector.h"
#include "llvm/ADT/StringExtras.h"
#include "llvm/ADT/StringMap.h"
#include "llvm/ADT/StringRef.h"

using llvm::SmallSet;
using llvm::StringMap;
using llvm::StringRef;

namespace llvm {
namespace propeller {

static const char BASIC_BLOCK_UNIFIED_CHARACTERS[] = "arf";

// This data structure is shared between lld propeller components and
// create_llvm_prof. In short, create_llvm_prof parses the binary, wraps all the
// symbol information using SymbolEntry class, whereas in Propeller, PropFile
// class parses the propeller profile (which is generated by create_llvm_prof),
// and wraps the symbol information in SymbolEntry. In other words, SymbolEntry
// is the interface shared between create_llvm_prof and Propeller.
// [create_llvm_prof refer to:
// https://github.com/shenhanc78/autofdo/tree/plo-dev]
struct SymbolEntry {
  struct BBInfo {
    enum BBInfoType : unsigned char {
      BB_NONE = 0,    // For functions.
      BB_NORMAL,      // Ordinary BB
      BB_RETURN,      // Return BB
      BB_FALLTHROUGH, // Fallthrough BB
    } type;
    bool isLandingPad;
  };

  using AliasesTy = SmallVector<StringRef, 3>;

  SymbolEntry(uint64_t o, const StringRef &n, AliasesTy &&as, uint32_t bdx,
              uint64_t address, uint64_t s, SymbolEntry *funcptr, uint32_t md)
      : ordinal(o), fname(n), aliases(std::move(as)), bbindex(bdx),
        addr(address), size(s), bbInfo({BBInfo::BB_NONE, false}), hotTag(false),
        containingFunc(funcptr ? funcptr : this), metadata(md) {
    assert(ordinal);
  }

  // Unique index number across all symbols that participate linking.
  const uint64_t ordinal;
  // For a function symbol, it's the full name. For a bb symbol this is only the
  // bbIndex part, which is the number of "a"s before the ".bb." part. For
  // example "8", "10", etc. Refer to Propfile::createFunctionSymbol and
  // Propfile::createBasicBlockSymbol.
  const StringRef fname;
  const AliasesTy aliases;
  const uint32_t bbindex;
  const uint64_t addr;
  const uint64_t size;
  const BBInfo bbInfo;

  bool hotTag; // Whether this symbol is listed in the propeller section.
  // For bbTag symbols, this is the containing fuction pointer, for a normal
  // function symbol, this points to itself. This is neverl nullptr.
  SymbolEntry *containingFunc;

  const uint32_t metadata;

  bool canFallthrough() const {
    return true;
    // return bbInfo.type == BBInfo::BB_FALLTHROUGH ||
    //        bbInfo.type == BBInfo::BB_NORMAL || bbInfo.type == BBInfo::BB_NONE;
  }

  bool isReturnBlock() const { return kMetaReturnBlockMask & metadata; }

  bool isLandingPadBlock() const { return kMetaEhPadMask & metadata; }

  bool operator<(const SymbolEntry &Other) const {
    return ordinal < Other.ordinal;
  }

  bool isFunction() const { return containingFunc == this || !containingFunc; }
  bool isBasicBlock() const { return containingFunc && containingFunc != this; }

  static BBInfo toBBInfo(const char c) {
    bool isLandingPad = toLower(c) != c;
    switch (toLower(c)) {
    case 'a':
      return {BBInfo::BB_NORMAL, isLandingPad};
    case 'r':
      return {BBInfo::BB_RETURN, isLandingPad};
    case 'f':
      return {BBInfo::BB_FALLTHROUGH, isLandingPad};
    default:
      assert(false);
    }
    return {BBInfo::BB_NONE, false};
  }

  struct OrdinalLessComparator {
    bool operator()(SymbolEntry *s1, SymbolEntry *s2) const {
      if (s1 && s2)
        return s1->ordinal < s2->ordinal;
      return !!s1 < !!s2;
    }
  };

  static constexpr uint64_t INVALID_ADDRESS = uint64_t(-1);
  static constexpr uint64_t kMetaReturnBlockMask = 1;
  static constexpr uint64_t kMetaTailCallMask = (1 << 1);
  static constexpr uint64_t kMetaEhPadMask = (1 << 2);
};

} // namespace propeller
} // namespace llvm

#endif
